#include <stdlib.h>
#include <stdio.h>

#ifdef _OPENMP
#include <omp.h>
#endif

#include <sys/time.h>

int tresh;

double my_gettimeofday(){
  struct timeval tmp_time;
  gettimeofday(&tmp_time, NULL);
  return tmp_time.tv_sec + (tmp_time.tv_usec * 1.0e-6L);
}

///////////////////////////////////////////////////////////////////////
/// WARNING: naive algorithm with worst operation count!
int fib(int n) {
  int i, j;

  if (n<2)
    return n;
  else {
    if(n>tresh){
#pragma omp task shared(i)
      i=fib(n-1);

#pragma omp task shared(j)
      j=fib(n-2);
    
#pragma omp taskwait
      return i+j;
    }
    else{
    i=fib_seq(n-1);
    j=fib_seq(n-2);

    return i+j;
  }
 }
}
  
int fib_seq(int n) {
  int i, j;

  if (n<2)
    return n;
  else {
    i=fib(n-1);
    j=fib(n-2);
    
    return i+j;
  }

}
   
  ///////////////////////////////////////////////////////////////////////
  int main(int argc, char **argv)
{
  int i,j;
  double debut=0.0, fin=0.0;
  int n=45; /* default value -> roughly 10 seconds of computation */
  int res=0;

  /* Read 'n' on command line: */
  if (argc == 2){
    n = atoi(argv[1]);
  }
  tresh=n/2;
  printf("n = %d\n", n);
  /* Start timing */
  debut = my_gettimeofday();
 
  /* Do computation:  */
  #ifdef _OPENMP
#pragma omp parallel shared(n)
#pragma omp single
  res=fib(n);

#else
  res=fib(n);
#endif
     
  /* End timing */
  fin = my_gettimeofday();
  fprintf(stdout, " fib(%d)=%d\n", n, res);
  fprintf( stdout, "For n=%d: total computation time (with gettimeofday()) : %g s\n",
	   n, fin - debut);
      
  return 0;
}
